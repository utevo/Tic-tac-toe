{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","onCLick","renderSquare","React","Component","Game","state","history","Array","fill","xIsNext","length","slice","calculateWinner","setState","concat","status","current","winner","isFull","every","someoneWon","Boolean","calculateDraw","hadndleClick","chars","map","index","ReactDOM","render","document","getElementById"],"mappings":"2PAKA,SAASA,EAAOC,GACd,OACE,4BAAQC,UAAU,SAChBC,QAASF,EAAME,SAEdF,EAAMG,O,IAKPC,E,qLACSC,GAAI,IAAD,OACd,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAMQ,QAAQH,Q,+BAI/E,OACE,6BACE,yBAAKJ,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAErB,yBAAKR,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,IAErB,yBAAKR,UAAU,aACZK,KAAKG,aAAa,GAClBH,KAAKG,aAAa,GAClBH,KAAKG,aAAa,S,GArBTC,IAAMC,WA4BpBC,E,YACJ,WAAYZ,GAAQ,IAAD,8BACjB,4CAAMA,KACDa,MAAQ,CACXC,QAAS,CAAC,CACRP,QAASQ,MAAM,GAAGC,KAAK,QAEzBC,SAAS,GANM,E,0EAUNZ,GACX,IAAMS,EAAUR,KAAKO,MAAMC,QAErBP,EADUO,EAAQA,EAAQI,OAAU,GAClBX,QAAQY,QAC5BC,EAAgBb,IAAYA,EAAQF,KAGxCE,EAAQF,GAAKC,KAAKO,MAAMI,QAAU,IAAM,IACxCX,KAAKe,SAAS,CACZP,QAASA,EAAQQ,OAAO,CAAC,CACvBf,aAEFU,SAAUX,KAAKO,MAAMI,a,+BAIf,IAMJM,EANG,OACDT,EAAUR,KAAKO,MAAMC,QACrBU,EAAUV,EAAQA,EAAQI,OAAS,GACnCO,EAASL,EAAgBI,EAAQjB,SAYvC,OAPEgB,EA6CN,SAAuBhB,GACrB,IAAImB,EAASnB,EAAQoB,OAAM,SAACxB,GAAD,OAAWA,KAClCyB,EAAaC,QAAQT,EAAgBb,IACzC,SAAImB,GAAWE,GApDEE,CAAcN,EAAQjB,SAI1B,OACAkB,EACA,WAAaA,EAEb,iBAAmBnB,KAAKO,MAAMI,QAAU,IAAM,KAIvD,yBAAKhB,UAAU,QACb,yBAAKA,UAAU,cACb,kBAACG,EAAD,CACEG,QAASiB,EAAQjB,QACjBC,QAAS,SAACH,GAAD,OAAO,EAAK0B,aAAa1B,OAEtC,yBAAKJ,UAAU,aACb,6BAAMsB,GACN,mC,GAnDSb,IAAMC,WA0DzB,SAASS,EAAgBb,GAYvB,IAXA,IAWA,MAXc,CACZ,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGT,eAAwB,CAAnB,IACCyB,EADO,KACMC,KAAI,SAAAC,GAAK,OAAI3B,EAAQ2B,MAGtC,GAAIF,EAAM,KAAOA,EAAM,IAAMA,EAAM,KAAOA,EAAM,GAC9C,OAAOA,EAAM,GAEjB,OAAO,KAaTG,IAASC,OACP,kBAACxB,EAAD,MACAyB,SAASC,eAAe,W","file":"static/js/main.d7213468.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\n\nfunction Square(props) {\n  return (\n    <button className=\"square\"\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onCLick(i)} />;\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      xIsNext: true,\n    };\n  }\n\n  hadndleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length -  1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const isDraw = calculateDraw(current.squares);\n\n    let status;\n    if (isDraw) {\n      status = 'Draw';\n    } else if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    } \n\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onCLick={(i) => this.hadndleClick(i)} />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{/* TODO */}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [0, 4, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [2, 4, 6],\n    [3, 4, 5],\n    [6, 7, 8],\n  ]\n\n  for (let line of lines) {\n    let chars = line.map(index => squares[index]);\n\n    // if all chars are the same\n    if (chars[0] === chars[1] && chars[1] === chars[2])\n      return chars[0];\n  }\n  return null;\n}\n\nfunction calculateDraw(squares) {\n  let isFull = squares.every((value) => value);\n  let someoneWon = Boolean(calculateWinner(squares));\n  if (isFull && !someoneWon)\n      return true;\n  return false;\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}